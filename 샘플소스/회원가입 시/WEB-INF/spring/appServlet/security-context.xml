<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.7.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<context:component-scan base-package="com.min.edu" />

	<!-- Spring Security API제공 암호화 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- security:http : http 요청처리를 위한 보안구성 정의 auto-config="true" : Spring Security 보안설정을 자동으로 구성 적용처리 -->
	<security:http auto-config="true" use-expressions="true">

		<!-- csrf 사용여부(사이트간 위변조 방지를 위한 처리 - true : 미사용) -->
		<security:csrf disabled="false" />

	</security:http>

	<!-- 
	ProviderManager 인터페이스를 가지고 있으며, ID,Password 검증하는 실질적인 클래스 
	1.	ID검증: UserDetailsService에서 DB에서 사용자를 조회. 사용자가 없을 경우 UserNotFoundException 예외를 발생시킨다. 
		성공하면 UserDetails 객체를 반환한다. 
	2.	Password 검증: 반환 받은 UserDetails 객체에 저장된 Password와 Authentication에 저장된 Password(로그인시 입력한 Password)를 
		matches 메서드를 이용하여 비교. 일치하지 않는다면 BadCredentialException 예외를 발생시킨다. 
	3.	추가 검증 까지 완료하면 Authentication(유저 정보, 권한 정보)를 AuthenticationManager에게 전달. 
		AuthenticationManager는 Filter에게 전달하고, Filter는 이 정보를 전역적으로 사용할 수 있게 SecurityContext에 전달한다.
	-->
	<security:authentication-manager>
	</security:authentication-manager>

</beans>
